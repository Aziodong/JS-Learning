//操作符
//一元操作符：++/--/+/-

//++/--:前置，后置
/*
++/--适用于任何类型，不过需要将值转换为数字在执行加减操作
规则：
 在应用于一个不包含有效数字字符的字符串时，将变量的值设置为NaN（第4 章将详细讨论）。
字符串变量变成数值变量。
 在应用于布尔值false 时，先将其转换为0 再执行加减1 的操作。布尔值变量变成数值变量。
 在应用于布尔值true 时，先将其转换为1 再执行加减1 的操作。布尔值变量变成数值变量。
 在应用于浮点数值时，执行加减1 的操作。
 在应用于对象时，先调用对象的valueOf()方法以取得一个可供操作的
值。然后对该值应用前述规则。如果结果是NaN，则在调用toString()方法后再应用前述规
则???
*/
console.log("--------++/-- --------");
var strPP="123e7";
console.log("123:"+(++strPP));
var strPP2="0xA"
console.log("0XA:"+(++strPP2));
var strPP3="013";
console.log("013:"+(++strPP3));
var strPP4="X";
console.log("X:"+(++strPP4));
var strPP5=true;
console.log("true:"+(++strPP5));
var strPP6={
	valueOf:function(){
		return 2;
	}
};
console.log("Obj:"+(++strPP6));

//+/-
/*
一元加操作符以一个加号（+）表示，放在数值前面，对数值不会产生任何影响

在对非数值应用一元加操作符时，该操作符会像Number()转型函数一样对这个值执行转换。
换句话说，布尔值false 和true 将被转换为0 和1，字符串值会被按照一组特殊的规则进行解析，而
对象是先调用它们的valueOf()和（或）toString()方法，再转换得到的值。
*/
console.log("-------- +/- --------");
var s1 = "01";
var s2 = "1.1";
var s3 = "z";
var b = false;
var f = 1.1;
var o = {
valueOf: function() {
return -1;
}
};
console.log("s1:"+(+s1));
console.log("s2:"+(+s2));
console.log("s3:"+(+s3));
console.log("b:"+(+b));
console.log("f:"+(+f));
console.log("o:"+(+o));

//位操作符：位操作符用于在最基本的层次上，即按内存中表示数值的位来操作数值。

//按位非(NOT):~
//执行按位非的结果就是返回数值的反码。即将0 替换为1，将1 替换为0
console.log("-----位操作符-----");
console.log("按位非(NOT):"+~25);//-26
//按位与(AND):&
console.log("按位与(AND):"+(25&3));//1
//按位或(OR):|
console.log("按位或(OR):"+(25|3));//27
//按位异或(XOR):这个操作在两个数值对应位上只有一个1 时才返回1，如果对应的两位都是1 或都是0，则返回0。
console.log("按位异或(XOR):"+(25^3));//26
//左移：<< 这个操作符会将数值的所有位向左移动指定的位数。
console.log("左移:"+(1<<5));//32
//右移(保留符号):>> 这个操作符会将数值向右移动，但保留符号位
console.log("右移(保留符号):"+(64>>5));//2
//无符号右:>>> 这个操作符会将数值的所有32 位都向右移动。
//正数来说，无符号右移的结果与有符号右移相同。
console.log("无符号右移，正数："+(64>>>5));
//负数，会导致数值变为正数
console.log("无符号右移,负数:"+(-1>>>5));


//布尔操作符

//逻辑非 ：！
/*
可以应用于ECMAScript 中的任何值。无论这个值是什么数据
类型，这个操作符都会返回一个布尔值。逻辑非操作符首先会将它的操作数转换为一个布尔值，然后再
对其求反。
通过Boolean函数转换为布尔值再求反
*/
console.log("------逻辑非------")
console.log(!undefined);
console.log(!null);
console.log(!"");

//逻辑与：&&
/*
逻辑与操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值。
对于逻辑与操作而言，如果第一个操作数是false，则无论第二个操作数是什么值，结果都不再可能是
true 了。

逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值。在有一个操作数不是布尔值的情况
下，逻辑与操作就不一定返回布尔值；
规则：
如果第一个操作数可以通过Boolean函数得到true，则返回第二个操作数，否则返回第一个操作数
*/
console.log("----逻辑与-----");
var AndResult= null && {y:1};
console.log(AndResult);//null
AndResult={} && {y:1};
console.log(AndResult);//{y:1}
AndResult="1" && true;
console.log(AndResult);//true

//逻辑或：||
/*
逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值
规则：
如果第一个操作数可以通过Boolean函数得到true，则返回它，否则返回第二个操作数
*/


